<div class="mb-8">
  <div class="text-center">
    <h2 class="text-4xl font-bold bg-gradient-to-r from-tech to-accent bg-clip-text text-transparent mb-4">
      运维工具导航
    </h2>
    <p class="text-lg text-gray-600 max-w-2xl mx-auto mb-6">
      快速访问常用的运维工具和系统，提高工作效率
    </p>

    <!-- 搜索框和筛选器 -->
    <div class="max-w-4xl mx-auto">
      <div class="flex flex-col md:flex-row gap-4 items-center justify-center">
        <!-- 搜索框 -->
        <div class="flex-1 max-w-md">
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
              </svg>
            </div>
            <input type="text"
                   id="searchInput"
                   class="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-lg leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-tech focus:border-tech text-sm"
                   placeholder="搜索运维工具和系统..."
                   autocomplete="off">
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center">
              <button id="clearSearch" class="text-gray-400 hover:text-gray-600 hidden">
                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
              </button>
            </div>

            <!-- 搜索建议下拉框 -->
            <div id="searchSuggestions" class="hidden absolute z-50 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg max-h-80 overflow-y-auto">
              <div id="suggestionsLoading" class="hidden p-3 text-center text-gray-500 text-sm">
                <svg class="animate-spin h-4 w-4 mx-auto mb-2" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                正在搜索...
              </div>
              <ul id="suggestionsList" class="py-1"></ul>
              <div id="suggestionsEmpty" class="hidden p-3 text-center text-gray-500 text-sm">
                没有找到匹配的结果
              </div>
            </div>
          </div>
        </div>

        <!-- 分类筛选器 -->
        <div class="flex-shrink-0">
          <div class="relative">
            <select id="categoryFilter"
                    class="appearance-none bg-white border border-gray-300 rounded-lg px-4 py-3 pr-8 text-sm text-gray-700 focus:outline-none focus:ring-2 focus:ring-tech focus:border-tech cursor-pointer">
              <option value="">全部分类</option>
              <% @categories.each do |category| %>
                <% if category[:links] && category[:links].any? %>
                  <option value="<%= category[:id] %>"><%= category[:name] %></option>
                <% end %>
              <% end %>
            </select>
            <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
              <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- 统计信息 -->
      <div class="mt-4 flex flex-col sm:flex-row items-center justify-center gap-4 text-xs text-gray-500">
        <span id="searchStats">共 <%= @categories.sum { |cat| cat[:links].length } %> 个工具</span>
        <span id="filterStats" class="hidden"></span>
        <button id="clearAllFilters" class="hidden text-tech hover:text-tech/80 underline">
          清除所有筛选
        </button>
      </div>
    </div>
  </div>
</div>

<!-- 无搜索结果提示 -->
<div id="noResults" class="hidden text-center py-16">
  <div class="w-32 h-32 mx-auto mb-6 bg-white rounded-full flex items-center justify-center border-2 border-gray-200 shadow-sm">
    <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
    </svg>
  </div>
  <h3 class="text-2xl font-medium text-gray-700 mb-3">未找到匹配的工具</h3>
  <p class="text-gray-500 mb-6 max-w-md mx-auto">请尝试使用其他关键词搜索或选择不同的分类</p>
  <button onclick="clearAllFilters()" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-tech to-accent text-white text-sm font-medium rounded-lg hover:from-tech/90 hover:to-accent/90 transition-all duration-200 shadow-md hover:shadow-lg">
    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
    </svg>
    清除所有筛选
  </button>
</div>

<% if @categories && @categories.any? %>
  <div class="space-y-8" id="categoriesContainer">
    <% @categories.each do |category| %>
      <% if category[:links] && category[:links].any? %>
        <div class="category-section bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden"
             data-category-id="<%= category[:id] %>"
             data-category-name="<%= category[:name] %>"
             data-category-description="<%= category[:description] %>">
          <div class="bg-gradient-to-r from-gray-50 to-blue-50 px-6 py-4 border-b border-gray-200">
            <div class="flex items-center space-x-3">
              <div class="w-8 h-8 bg-gradient-to-br from-tech to-accent rounded-lg flex items-center justify-center">
                <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"/>
                </svg>
              </div>
              <div>
                <h3 class="text-xl font-semibold text-gray-800"><%= category[:name] %></h3>
                <% if category[:description] && !category[:description].empty? %>
                  <p class="text-sm text-gray-600 mt-1"><%= category[:description] %></p>
                <% end %>
              </div>
            </div>
          </div>

          <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
              <% category[:links].each do |link| %>
                <a href="<%= link[:url] %>" target="_blank"
                   class="link-item group block p-4 bg-gray-50 border border-gray-200 rounded-lg hover:border-tech hover:shadow-md transition-all duration-300"
                   data-title="<%= link[:title] %>"
                   data-description="<%= link[:description] %>"
                   data-url="<%= link[:url] %>"
                   data-category-id="<%= category[:id] %>">
                  <div class="flex items-start space-x-3">
                    <div class="flex-shrink-0">
                      <div class="w-10 h-10 bg-gradient-to-br from-tech/10 to-accent/10 rounded-lg flex items-center justify-center border border-tech/20">
                        <span class="text-xl"><%= link[:icon] || '🔗' %></span>
                      </div>
                    </div>
                    <div class="flex-1 min-w-0">
                      <h4 class="text-sm font-medium text-gray-800 group-hover:text-tech transition-colors">
                        <%= link[:title] %>
                      </h4>
                      <% if link[:description] && !link[:description].empty? %>
                        <p class="text-xs text-gray-500 mt-1 line-clamp-2">
                          <%= link[:description] %>
                        </p>
                      <% end %>
                      <div class="flex items-center mt-2">
                        <svg class="w-3 h-3 text-gray-400 group-hover:text-tech transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                        </svg>
                        <span class="text-xs text-gray-400 group-hover:text-tech ml-1 transition-colors">访问系统</span>
                      </div>
                    </div>
                  </div>
                </a>
              <% end %>
            </div>
          </div>
        </div>
      <% end %>
    <% end %>
  </div>
<% else %>
  <div class="text-center py-16">
    <div class="w-32 h-32 mx-auto mb-6 bg-white rounded-full flex items-center justify-center border-2 border-gray-200 shadow-sm">
      <svg class="w-16 h-16 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
      </svg>
    </div>
    <h3 class="text-2xl font-medium text-gray-700 mb-3">暂无导航链接</h3>
    <p class="text-gray-500 mb-6 max-w-md mx-auto">系统正在初始化中，请联系管理员添加导航链接</p>
    <a href="/admin" class="inline-flex items-center px-6 py-3 bg-gradient-to-r from-tech to-accent text-white text-sm font-medium rounded-lg hover:from-tech/90 hover:to-accent/90 transition-all duration-200 shadow-md hover:shadow-lg">
      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
      </svg>
      进入管理后台
    </a>
  </div>
<% end %>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const categoryFilter = document.getElementById('categoryFilter');
    const clearButton = document.getElementById('clearSearch');
    const clearAllButton = document.getElementById('clearAllFilters');
    const categoriesContainer = document.getElementById('categoriesContainer');
    const noResults = document.getElementById('noResults');
    const searchStats = document.getElementById('searchStats');
    const filterStats = document.getElementById('filterStats');

    // 搜索建议相关元素
    const searchSuggestions = document.getElementById('searchSuggestions');
    const suggestionsList = document.getElementById('suggestionsList');
    const suggestionsLoading = document.getElementById('suggestionsLoading');
    const suggestionsEmpty = document.getElementById('suggestionsEmpty');

    let totalLinks = 0;
    let visibleLinks = 0;
    let totalCategories = 0;
    let visibleCategories = 0;
    let searchTimeout = null;
    let selectedSuggestionIndex = -1;
    let suggestions = [];

    // 计算总数
    function countTotals() {
        totalLinks = document.querySelectorAll('.link-item').length;
        totalCategories = document.querySelectorAll('.category-section').length;
        updateStats();
    }

    // 更新统计信息
    function updateStats() {
        const hasSearch = searchInput.value.trim() !== '';
        const hasFilter = categoryFilter.value !== '';

        if (!hasSearch && !hasFilter) {
            searchStats.textContent = `共 ${totalLinks} 个工具，${totalCategories} 个分类`;
            filterStats.classList.add('hidden');
            clearAllButton.classList.add('hidden');
        } else {
            let statsText = '';
            if (hasSearch && hasFilter) {
                statsText = `找到 ${visibleLinks} 个匹配的工具`;
            } else if (hasSearch) {
                statsText = `找到 ${visibleLinks} 个匹配的工具`;
            } else if (hasFilter) {
                const selectedOption = categoryFilter.options[categoryFilter.selectedIndex];
                statsText = `${selectedOption.text} - ${visibleLinks} 个工具`;
            }

            searchStats.textContent = statsText;
            filterStats.classList.add('hidden');
            clearAllButton.classList.remove('hidden');
        }

        // 获取搜索建议
        debouncedFetchSuggestions(searchInput.value.trim());
    }

    // 获取搜索建议
    async function fetchSuggestions(query) {
        if (!query || query.trim().length < 1) {
            hideSuggestions();
            return;
        }

        // 显示加载状态
        showSuggestionsLoading();

        try {
            const response = await fetch(`/api/search/suggestions?q=${encodeURIComponent(query.trim())}&limit=8`);
            const data = await response.json();

            suggestions = data.suggestions || [];
            displaySuggestions(suggestions, query);
        } catch (error) {
            console.error('获取搜索建议失败:', error);
            hideSuggestions();
        }
    }

    // 显示搜索建议
    function displaySuggestions(suggestions, query) {
        hideSuggestionsLoading();

        if (!suggestions || suggestions.length === 0) {
            showSuggestionsEmpty();
            return;
        }

        suggestionsList.innerHTML = '';
        selectedSuggestionIndex = -1;

        suggestions.forEach((suggestion, index) => {
            const li = document.createElement('li');
            li.className = 'suggestion-item px-4 py-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0';
            li.dataset.index = index;

            // 高亮匹配的文本
            const highlightedTitle = highlightMatch(suggestion.title, query);
            const highlightedDesc = suggestion.description ? highlightMatch(suggestion.description, query) : '';

            li.innerHTML = `
                <div class="flex items-center space-x-3">
                    <div class="flex-shrink-0">
                        <div class="w-8 h-8 bg-gradient-to-br from-tech/10 to-accent/10 rounded-lg flex items-center justify-center">
                            <span class="text-sm">${suggestion.icon}</span>
                        </div>
                    </div>
                    <div class="flex-1 min-w-0">
                        <div class="flex items-center space-x-2">
                            <span class="text-sm font-medium text-gray-800">${highlightedTitle}</span>
                            ${suggestion.type === 'category' ?
                                '<span class="text-xs px-2 py-1 bg-blue-100 text-blue-800 rounded-full">分类</span>' :
                                '<span class="text-xs px-2 py-1 bg-green-100 text-green-800 rounded-full">工具</span>'
                            }
                        </div>
                        ${highlightedDesc ? `<div class="text-xs text-gray-600 mt-1 truncate">${highlightedDesc}</div>` : ''}
                        ${suggestion.category && suggestion.type === 'link' ?
                            `<div class="text-xs text-gray-500 mt-1">分类：${suggestion.category}</div>` : ''
                        }
                    </div>
                    ${suggestion.type === 'link' ? `
                        <div class="flex-shrink-0">
                            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                            </svg>
                        </div>
                    ` : ''}
                </div>
            `;

            // 添加点击事件
            li.addEventListener('click', () => selectSuggestion(suggestion));
            li.addEventListener('mouseenter', () => {
                selectedSuggestionIndex = index;
                updateSuggestionSelection();
            });

            suggestionsList.appendChild(li);
        });

        showSuggestions();
    }

    // 选择建议
    function selectSuggestion(suggestion) {
        if (suggestion.type === 'link' && suggestion.url) {
            // 如果是链接，直接打开
            window.open(suggestion.url, '_blank');
        } else {
            // 如果是分类或其他，设置搜索词并执行搜索
            searchInput.value = suggestion.title;
            hideSuggestions();
            performFilter();
        }
    }

    // 更新建议选择状态
    function updateSuggestionSelection() {
        const items = suggestionsList.querySelectorAll('.suggestion-item');
        items.forEach((item, index) => {
            if (index === selectedSuggestionIndex) {
                item.classList.add('bg-gray-100');
                item.scrollIntoView({ block: 'nearest' });
            } else {
                item.classList.remove('bg-gray-100');
            }
        });
    }

    // 显示建议下拉框
    function showSuggestions() {
        searchSuggestions.classList.remove('hidden');
        suggestionsEmpty.classList.add('hidden');
        suggestionsLoading.classList.add('hidden');
    }

    // 隐藏建议下拉框
    function hideSuggestions() {
        searchSuggestions.classList.add('hidden');
        selectedSuggestionIndex = -1;
        suggestions = [];
    }

    // 显示加载状态
    function showSuggestionsLoading() {
        searchSuggestions.classList.remove('hidden');
        suggestionsLoading.classList.remove('hidden');
        suggestionsEmpty.classList.add('hidden');
        suggestionsList.innerHTML = '';
    }

    // 隐藏加载状态
    function hideSuggestionsLoading() {
        suggestionsLoading.classList.add('hidden');
    }

    // 显示空结果
    function showSuggestionsEmpty() {
        searchSuggestions.classList.remove('hidden');
        suggestionsEmpty.classList.remove('hidden');
        suggestionsLoading.classList.add('hidden');
        suggestionsList.innerHTML = '';
    }

    // 处理键盘导航
    function handleSuggestionKeyboard(e) {
        const isVisible = !searchSuggestions.classList.contains('hidden');

        if (!isVisible || suggestions.length === 0) return;

        switch (e.key) {
            case 'ArrowDown':
                e.preventDefault();
                selectedSuggestionIndex = Math.min(selectedSuggestionIndex + 1, suggestions.length - 1);
                updateSuggestionSelection();
                break;

            case 'ArrowUp':
                e.preventDefault();
                selectedSuggestionIndex = Math.max(selectedSuggestionIndex - 1, -1);
                updateSuggestionSelection();
                break;

            case 'Enter':
                e.preventDefault();
                if (selectedSuggestionIndex >= 0 && suggestions[selectedSuggestionIndex]) {
                    selectSuggestion(suggestions[selectedSuggestionIndex]);
                } else {
                    hideSuggestions();
                    performFilter();
                }
                break;

            case 'Escape':
                e.preventDefault();
                hideSuggestions();
                break;
        }
    }

    // 防抖搜索建议
    function debouncedFetchSuggestions(query) {
        if (searchTimeout) {
            clearTimeout(searchTimeout);
        }

        searchTimeout = setTimeout(() => {
            fetchSuggestions(query);
        }, 300);
    }

    // 执行筛选
    function performFilter() {
        const query = searchInput.value.trim().toLowerCase();
        const selectedCategoryId = categoryFilter.value;

        if (query === '' && selectedCategoryId === '') {
            // 显示所有内容
            showAllCategories();
            clearButton.classList.add('hidden');
            noResults.classList.add('hidden');
            if (categoriesContainer) categoriesContainer.classList.remove('hidden');
            visibleLinks = totalLinks;
            visibleCategories = totalCategories;
        } else {
            // 执行筛选
            let hasResults = false;
            visibleLinks = 0;
            visibleCategories = 0;

            if (query !== '') {
                clearButton.classList.remove('hidden');
            } else {
                clearButton.classList.add('hidden');
            }

            const categories = document.querySelectorAll('.category-section');
            categories.forEach(category => {
                const categoryId = category.dataset.categoryId;
                const categoryName = category.dataset.categoryName.toLowerCase();
                const categoryDesc = category.dataset.categoryDescription.toLowerCase();
                const links = category.querySelectorAll('.link-item');
                let categoryHasVisibleLinks = false;

                // 检查分类筛选
                const categoryMatches = selectedCategoryId === '' || categoryId === selectedCategoryId;

                if (categoryMatches) {
                    links.forEach(link => {
                        const title = link.dataset.title.toLowerCase();
                        const description = link.dataset.description.toLowerCase();
                        const url = link.dataset.url.toLowerCase();

                        // 检查搜索匹配
                        const searchMatches = query === '' ||
                                            title.includes(query) ||
                                            description.includes(query) ||
                                            url.includes(query) ||
                                            categoryName.includes(query) ||
                                            categoryDesc.includes(query);

                        if (searchMatches) {
                            link.style.display = 'block';
                            categoryHasVisibleLinks = true;
                            hasResults = true;
                            visibleLinks++;

                            // 高亮匹配的文本
                            if (query !== '') {
                                highlightText(link, query);
                            } else {
                                clearHighlight(link);
                            }
                        } else {
                            link.style.display = 'none';
                            clearHighlight(link);
                        }
                    });
                } else {
                    // 分类不匹配，隐藏所有链接
                    links.forEach(link => {
                        link.style.display = 'none';
                        clearHighlight(link);
                    });
                }

                // 显示或隐藏分类
                if (categoryHasVisibleLinks) {
                    category.style.display = 'block';
                    visibleCategories++;
                } else {
                    category.style.display = 'none';
                }
            });

            // 显示或隐藏无结果提示
            if (hasResults) {
                noResults.classList.add('hidden');
                if (categoriesContainer) categoriesContainer.classList.remove('hidden');
            } else {
                noResults.classList.remove('hidden');
                if (categoriesContainer) categoriesContainer.classList.add('hidden');
            }
        }

        updateStats();
    }

    // 高亮匹配文本
    function highlightText(element, query) {
        const titleElement = element.querySelector('h4');
        const descElement = element.querySelector('p');

        if (titleElement) {
            const originalTitle = titleElement.dataset.originalText || titleElement.textContent;
            titleElement.dataset.originalText = originalTitle;
            titleElement.innerHTML = highlightMatch(originalTitle, query);
        }

        if (descElement) {
            const originalDesc = descElement.dataset.originalText || descElement.textContent;
            descElement.dataset.originalText = originalDesc;
            descElement.innerHTML = highlightMatch(originalDesc, query);
        }
    }

    // 清除高亮
    function clearHighlight(element) {
        const titleElement = element.querySelector('h4');
        const descElement = element.querySelector('p');

        if (titleElement && titleElement.dataset.originalText) {
            titleElement.textContent = titleElement.dataset.originalText;
        }

        if (descElement && descElement.dataset.originalText) {
            descElement.textContent = descElement.dataset.originalText;
        }
    }

    // 高亮匹配的文本
    function highlightMatch(text, query) {
        if (!query) return text;
        const regex = new RegExp(`(${escapeRegExp(query)})`, 'gi');
        return text.replace(regex, '<mark class="bg-yellow-200 text-yellow-800 px-1 rounded">$1</mark>');
    }

    // 转义正则表达式特殊字符
    function escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    // 显示所有分类
    function showAllCategories() {
        const categories = document.querySelectorAll('.category-section');
        const links = document.querySelectorAll('.link-item');

        categories.forEach(category => {
            category.style.display = 'block';
        });

        links.forEach(link => {
            link.style.display = 'block';
            clearHighlight(link);
        });
    }

    // 清除搜索
    function clearSearch() {
        searchInput.value = '';
        performFilter();
        searchInput.focus();
    }

    // 清除所有筛选
    function clearAllFilters() {
        searchInput.value = '';
        categoryFilter.value = '';
        performFilter();
        searchInput.focus();
    }

    // 绑定事件
    searchInput.addEventListener('input', function() {
        performFilter();
        // 获取搜索建议
        debouncedFetchSuggestions(this.value.trim());
    });

    searchInput.addEventListener('keydown', function(e) {
        // 处理搜索建议的键盘导航
        handleSuggestionKeyboard(e);

        // 原有的ESC清除功能（仅当建议框不可见时）
        if (e.key === 'Escape' && searchSuggestions.classList.contains('hidden')) {
            clearSearch();
        }
    });

    // 搜索框获得焦点时，如果有内容则显示建议
    searchInput.addEventListener('focus', function() {
        if (this.value.trim()) {
            debouncedFetchSuggestions(this.value.trim());
        }
    });

    // 点击页面其他地方时隐藏建议
    document.addEventListener('click', function(e) {
        if (!searchInput.contains(e.target) && !searchSuggestions.contains(e.target)) {
            hideSuggestions();
        }
    });

    categoryFilter.addEventListener('change', function() {
        performFilter();
        hideSuggestions(); // 分类筛选时隐藏建议
    });

    clearButton.addEventListener('click', function() {
        clearSearch();
        hideSuggestions();
    });

    clearAllButton.addEventListener('click', function() {
        clearAllFilters();
        hideSuggestions();
    });

    // 全局函数
    window.clearSearch = clearSearch;
    window.clearAllFilters = clearAllFilters;

    // 初始化
    countTotals();
});
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  mark {
    background-color: #fef3c7;
    color: #92400e;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
  }

  /* 自定义下拉框样式 */
  select {
    background-image: none;
  }
</style>